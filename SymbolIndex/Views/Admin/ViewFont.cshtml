@{
    ViewBag.Title = "Xem Font";
    Layout = "~/Views/Shared/Admin_Layout.cshtml";

    SymbolIndex.Models.Font fontCurrent = ViewBag.FontCurrent;
    IList<SymbolIndex.Models.Symbol> symbols = ViewBag.Symbols;
}

<h2>ViewFont</h2>

@*@using (Html.BeginForm())
{
    <input name="Id" type="hidden" value="@fontCurrent.Id" />
    <input name="isOverwite" type="checkbox" value="Is overwrite?" />
    <input name="genSymbols" type="submit" value="Generate symbols" />
}*@


<div class="row">
    <div class="col-lg-12">

        <div class="row">
            <div class="col-lg-12">
                <!-- Breadcrumb-->
                <nav aria-label="breadcrumb" role="navigation" style="margin-top: 20px">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/Admin/">Bảng điều khiển</a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/Admin/FontList/">Quản lý font</a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">Font: @fontCurrent.FontName</li>
                    </ol>
                </nav>
                <!-- End Breadcrumb-->
            </div>
        </div>

        

        <button class="btn btn-primary" onclick="resetSymbols()">Auto generate list of symbols</button>
        <button class="btn btn-warning" onclick="clearFontSymbols()">Clear all symbols</button>
        <button class="btn btn-info" onclick="commitTags()">Commit tags</button>


        <div class="panel panel-default">
            <div class="panel-heading" style="background-color:rgb(1, 85, 180); color:aliceblue">
                <i class="fa fa-file-text fa-fw"></i> Danh sách font
            </div>
            <!-- /.panel-heading -->
            <div class="panel-body">
                <div class="table-responsive">
                    @* ---- table head ----*@

                    <div style="height:60px;overflow: hidden; overflow-y:scroll;">
                        <table class="table table-striped table-bordered" style="margin-bottom:0">
                            <thead>
                                <tr>
                                    <th style="width:5%">
                                        S ID
                                    </th>
                                    <th style="width:5%">
                                        Kí tự
                                    </th>
                                    <th style="width:10%">
                                        Tên gốc
                                    </th>
                                    <th style="width:65%">
                                        Tags (phân biệt bởi ',')
                                    </th>
                                    <th style="width:15%"></th>
                                </tr>
                            </thead>
                        </table>
                    </div>

                    
                    @* ---- table body ----*@
                    <div style="height:300px;overflow: hidden; overflow-y:scroll;" id="div_table">
                        <table class="table table-striped table-bordered table-hover" id="table_content">
                            @Html.Partial("_FontSymbolsTBody",
                           new ViewDataDictionary()
                           {
                               ["fontCurrent"] = fontCurrent,
                               ["symbols"] = symbols
                           }
                           )
                        </table>
                    </div>
                    @* bottom line*@



                </div>
                <!-- /.table-responsive -->
            </div>
            <!-- /.panel-body -->
        </div>


    </div>
</div>


@section AddToHead{
    <link href="~/Assets/css/mycss.css" rel="stylesheet" type="text/css" />
    <style>

        @@font-face {
            font-family: '@fontCurrent.FontName';
            src: url(@fontCurrent.FontUrl);
        }
        .myFont{
                font-family: '@fontCurrent.FontName';
            }

        .symbol-container {
            display: inline-block;
            width: 12.5%;
            padding: 10px;
            min-width: 90px;
        }
        .symbol-area {
            width: 80px;
            height: 120px;
            border-color: #D1D1D1;
            border-style: solid;
            border-radius: 10px;
            border-width: 0.5px;
            background-color: #FFF;
        }
    </style>
}
<script src="~/Scripts/dist/opentype.min.js"></script>
<script>
    var font, check;

    function resetSymbols() {
        var path = '@fontCurrent.FontUrl';

        if (!path) {
            alert('this font has no path!');
            return;
        }

        opentype.load(path, function (err, font) {
            if (err) {
                showErrorMessage(err.toString());
                return;
            }
            parseCharacters(font);
        });
    }

    function parseCharacters(font) {
        window.font = font;

        //alert('unicode of #8: ' + formatUnicode(font.glyphs.glyphs[8].unicode));
        var symbolsInXUTF = [];
        

        @*var i = 0;
        var jGlyphs = $.makeArray(font.glyphs.glyphs);
        jGlyphs.each(function (child) {
            symbolsInXUTF.push(formatUnicode(child.unicode));
        });*@

        $.each(font.glyphs.glyphs, function (i, child) {
            if (child.unicode)
                symbolsInXUTF.push(String.fromCharCode(parseInt(formatUnicode(child.unicode), 16)));
        });
        //
        @*for (var i = 0; i < font.glyphs.length; i++) {
            symbolsInXUTF.push(formatUnicode(font.glyphs.glyphs[i].unicode));
        }*@

        $.ajax({
            url: "/Admin/AddSymbols",
            type: "POST",
            data: {
                fontId: '@fontCurrent.Id',
                symbolsInXUTF: symbolsInXUTF
            },
            dataType: 'html',
            traditional: true,
            success: function (data) {
                $('#table_content').html(data);
            },
            error: function (err) {
                document.write("Error: " + err.responseText);
            }
        });

        @*//var w = cellWidth - cellMarginLeftRight * 2,
        //    h = cellHeight - cellMarginTop - cellMarginBottom,
        //    head = font.tables.head,
        //    maxHeight = head.yMax - head.yMin;
        //fontScale = Math.min(w / (head.xMax - head.xMin), h / maxHeight);
        //fontSize = fontScale * font.unitsPerEm;
        //fontBaseline = cellMarginTop + h * head.yMax / maxHeight;

        //var pagination = document.getElementById("pagination");
        //pagination.innerHTML = '';
        //var fragment = document.createDocumentFragment();
        //var numPages = Math.ceil(font.numGlyphs / cellCount);
        //for (var i = 0; i < numPages; i++) {
        //    var link = document.createElement('span');
        //    var lastIndex = Math.min(font.numGlyphs - 1, (i + 1) * cellCount - 1);
        //    link.textContent = i * cellCount + '-' + lastIndex;
        //    link.id = 'p' + i;
        //    link.addEventListener('click', pageSelect, false);
        //    fragment.appendChild(link);
        //    // A white space allows to break very long lines into multiple lines.
        //    // This is needed for fonts with thousands of glyphs.
        //    fragment.appendChild(document.createTextNode(' '));
        //}
        //pagination.appendChild(fragment);

        //initGlyphDisplay();
        //displayGlyphPage(0);
        //displayGlyph(-1);
        //displayGlyphData(-1);*@



    }


    var checkCommit;
function commitTags() {

    var symbolsDatas = [];
    $.each($('#list').children(), function (i, child) {
        symbolsDatas.push( {
            Sid: $('#sid_' + i).html(),
            OName: $('#sname_' + i).html(),
            Content: $('#content_' + i).html(),
            Tags: $('#tags_' + i).val()
        });
    });

    checkCommit = symbolsDatas;

    $.ajax({
        url: "/Admin/CommitTags?fontId=@fontCurrent.Id",
        type: "POST",
        data: JSON.stringify ({ viewSymbols: symbolsDatas }),
        dataType: 'html',
        traditional: true,
        success: function (data) {
            $('#table_content').html(data);

            alert("cập nhật tags thành công");
        },
        error: function (err) {
            document.write("Error: " + err.responseText);
        }
    });         
}

    function clearFontSymbols() {
        $.ajax({
            url: "/Admin/ClearFontSymbols?fontId=@fontCurrent.Id",
            type: "POST",
            dataType: 'json',
            success: function (data) {
                if (data.success) {
                    console.log(data);

                    location.reload();
                }
                else {
                    console.log('failed: ' + data);
                }
            },
            error: function (err) {
                document.write("Error: " + err.responseText);
            }
        });
    }

    function formatUnicode(unicode) {
        unicode = Number(unicode).toString(16);
        if (unicode.length > 4) {
            return ("000000" + unicode.toUpperCase()).substr(-6)
        } else {
            return ("0000" + unicode.toUpperCase()).substr(-4)
        }
    }
    
</script>